<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:context="http://www.springframework.org/schema/context"
 xmlns:aop="http://www.springframework.org/schema/aop"
 xmlns:tx="http://www.springframework.org/schema/tx"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context-4.1.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
     <!-- 引入properties属性文件 -->
     <context:property-placeholder location="classpath:config/*.properties"/>
     <!-- 配置druid数据源 -->
	 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
           <property name="url" value="${jdbc.url}" />
           <property name="username" value="${jdbc.username}" />
           <property name="password" value="${jdbc.password}" />
           <property name="driverClassName" value="${jdbc.driver}" />
           <property name="maxActive" value="10" />
           <property name="minIdle" value="5" />
       </bean>
	 
	 
	 <!-- 把 sqlSessionFactory交给spring容器进行管理-->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	      <!-- 注入数据源 -->
	      <property name="dataSource" ref="dataSource"></property>
	      <!-- 注入mybatis的总配置文件 -->
	      <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"></property>
	 </bean>
	 
	 <!-- 扫描basePackage所指定的包中接口，并生成每个接口的代理类的对象，并把代理类的对象交给spring容器管理，
	   代理类在spring容器中的key为接口的简单名称
	  -->
	 <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    
	     <property name="basePackage" value="cn.offcn.mapper"></property>
	 </bean>
 </beans>